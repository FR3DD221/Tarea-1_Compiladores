Terminals 

plus -> '+'
minus -> '-'
product -> '*'
division -> '/'
power -> '^'
modulus -> '%'
equal -> '='
areEquals -> '=='
gratherThan -> '>'
lessThan -> '<'
gratherEQThan -> '>='
lessEQThan -> '<='
diff -> '!='
unaryPlus -> '++'
unaryMinus -> '--'

main -> 'main'

intT -> 'int'
floatT -> 'float'
stringT -> 'string'
charT -> 'char'

digit -> [0-9]
digitNoZero -> [1-9]
decimal -> \.[digit]+

letter -> [A-Za-z_]
letterV2 -> [A-Za-z]

true -> 'True'
false -> 'False'
boolT -> 'boolean'

delimeterFunc -> '_'
endExpr -> ';'
return -> 'return'

lineComment -> '\//'
blockStartComment -> '\/*'
blockEndCooment -> '*/'
lineJump -> '\n'

squareParentS -> '['
squareParentE -> ']'
parentS -> '('
parentE -> ')'
coma -> ','
sep -> ':'
loc -> 'local'
global -> 'global'
if -> 'if'
else -> 'else'
switch -> 'switch'
case -> 'case:'
default -> 'default:'
brake -> 'brake'
for -> 'for'
in -> 'in'
range -> 'range'
while -> 'while'

and -> '&'
or -> '|'

print -> 'print'
read -> 'read'

No terminals

id -> letterV2(letter|digit)*
stringC -> letter(letter|digit)*

comment -> (lineComment stringC)lineJump| blockStartComment stringC blockEndCooment

types -> charT | stringT | intT | floatT | boolT
typesLim -> charT | intT
typesLimFunc -> charT | intT | floatT | boolT
mathOp -> plus | minus | product | division | modulus | power
boolsMathOp -> lessThan | gratherThan | areEquals | gratherEQThan | lessEQThan | diff

intNum -> minus? digit|digitNoZero digit+
scopeVar -> (loc|global)
floatNum -> minus? intNum decimal digit+

boolNum -> (true|false)
typesNum -> boolNum|intNum|floatNum|stringC|letter
operation -> ((typesNum) mathOp (typesNum) )| (typesNum (unaryMinus | unaryPlus))
extraOperation -> mathOp (typesNum)

boolOp -> (intNum|floatNum) boolsMathOp (intNum|floatNum) 
extraBoolOp -> boolsMathOp (intNum|floatNum)

parameter -> typesLim id
parameters -> parentS parameterList? parentE
parameterList -> parameter (',' parameter)*

#Productions

#All about vars
assignation -> equal (boolNum|intNum|floatNum|stringC|operation|letter|arrayElement|boolOp) 
varAssig -> scopeVar (varIns|varInsAssig) assignation 
varInsAssig -> scopeVar sep types id assignation 
varIns -> scopeVar sep types sep id  

#All about arrays
assignationArray -> equal squareParentS (intNum|letter (coma intNum|letter)*)? squareParentE 
arrayIns -> scopeVar sep typesLim sep id sep squareParentS intNum squareParentE  
arrayInsAssig -> scopeVar sep typesLim sep id sep squareParentS sep intNum sep squareParentE assignationArray  
arrayAssig -> (arrayIns|arrayInsAssig) squareParentS intNum squareParentE equal (intNum|letter)  
arrayElement -> (arrayIns|arrayInsAssig) squareParentS intNum squareParentE  

#I think not necessary
extraVarAssig -> (varAssig|varInsAssig) equal (varAssig|varInsAssig) sep (mathOp (varAssig|varInsAssig)|extraOperation) sep endExpr
boolExtraVarAssig -> (varAssig|varInsAssig) equal (varAssig|varInsAssig) sep (boolsMathOp (varAssig|varInsAssig)|extraBoolOp) sep endExpr
equalizingVars-> (varAssig|varInsAssig) equal (varAssig|varInsAssig|varIns) endExpr

#All the posibilities that a code block can do
allABlockCouldCon -> (varAssig|varIns|varInsAssig|arrayAssig|arrayInsAssig|arrayIns|ifStruc|ifElseStruc|switchStruc|whileLoop|forLopp) endExpr

#All about functions
mainFun -> typesLimFunc sep main sep delimeterFunc sep allABlockCouldCon* sep return sep (stringC|operation)? sep endExpr sep delimeterFunc
function -> typesLimFunc sep id sep parameters sep delimeterFunc sep allABlockCouldCon* sep return sep (stringC|operation)? sep endExpr sep delimeterFunc

#conditional structures
ifStruc -> if sep parentS boolOp ((or | and) boolOp)* parentE delimeterFunc allABlockCouldCon* return (stringC|operation)? delimeterFunc
ifElseStruc -> ifStruc else delimeterFunc allABlockCouldCon* return (stringC|operation)? delimeterFunc
switchStruc -> switch parentS (intNum|stringC) parentE delimeterFunc (case(intNum|letter) allABlockCouldCon* brake endExpr)+ sep default allABlockCouldCon* brake endExpr delimeterFunc

#loops
whileLoop -> while parentS boolOp ((or | and) boolOp)* parentE delimeterFunc allABlockCouldCon* return? (stringC|operation)? delimeterFunc
forLopp -> for id sep in sep range parentS (0|intNum) coma intNum (1|intNum) parentE delimeterFunc allABlockCouldCon* return? (stringC|operation)? delimeterFunc

#StandardIO
printLn -> print parentS (stringC | operation | boolNum | intNum | floatNum | id) parentE endExpr
readInput -> read parentS (stringC | intNum | floatNum) parentE endExpr